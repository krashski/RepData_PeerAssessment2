extract.numeric("class5")
extract_numeric("class5")
skip()
students4
submit()
submit()
skip()
passed
failed
skip()
failed <- failed %>% mutate(status = "failed")
rbind_list(c("passed, "failed"))
skip()
sat
skip()
skip()
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL",
configure.args="--with-mysql-dir=/usr/local/bin/
--with-mysql-inc=/usr/local/include/mysql
--with-mysql-lib=/usr/local/lib", type="source")
# Find your R home
$ echo "R.home()" | Rscript /dev/stdin
Loading required package: stats
Loading required package: methods
[1] "/usr/local/russ/r/3.1.1/R.framework/Resources"
# Make sure that you have the MySQL home var in your Renviron
$ fgrep MYSQL_HOME /usr/local/russ/r/3.1.1/R.framework/Resources/etc/Renviron
MYSQL_HOME="/usr/local/mysql-5.6.12-osx10.7-x86_64/"
#### This step trips up everyone ####
# Make sure that the libmysqlclient dynamic lib is in your R lib path by
# 1. Get the dll path
$ echo "Sys.getenv('DYLD_FALLBACK_LIBRARY_PATH')" | Rscript /dev/stdin
Loading required package: stats
Loading required package: methods
[1] "/usr/local/Cellar/r/3.0.1/R.framework/Resources/lib"
# 2. Symlink your libmysqlclient
$ ln -s /usr/local/mysql-5.6.12-osx10.7-x86_64/lib/libmysqlclient.18.dylib /usr/local/russ/r/3.1.1/R.framework/Resources/lib
# 3. Install the package
$ export PKG_LIBS="-L/usr/local/mysql-5.6.12-osx10.7-x86_64/lib/ -lmysqlclient"
$ export PKG_CPPFLAGS="-I/usr/local/mysql-5.6.12-osx10.7-x86_64/include/"
$ R CMD INSTALL RMySQL.tar.gz
...
...
** installing vignettes
** testing if installed package can be loaded
* DONE (RMySQL)
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type="source")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("httr")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome",)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
q("n")
q()"n"
q()
library(RMySQL)
address <- "https://s3.amazonaws.com/coursera-uploads/user-aa18941eaa370a423a81390d/972586/asst-3/253e25b0540f11e4ae9b2dccf30e52ed.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
address <- "https://s3.amazonaws.com/coursera-uploads/user-aa18941eaa370a423a81390d/972586/asst-3/253e25b0540f11e4ae9b2dccf30e52ed.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
install.packages(c("highr", "httpuv", "jsonlite"))
library(rattle)
rattle()
install.packages(c("caret", "knitr", "party", "plotrix"))
library(lattice)
data(iris)
head(iris)
x <- with(iris, xyplot(Sepal.Length, Sepal.Width))
x <- xyplot(Sepal.Length, Sepal.Width, data = iris)
x <- xyplot(iris$Sepal.Length, iris$Sepal.Width)
x <- bwplot(iris$Sepal.Length, iris$Sepal.Width)
x <- bwplot(Sepal.Length, Sepal.Width, data = iris)
?xyplot
x <- bwplot(Sepal.Length, data = iris)
x <- bwplot(iris$Sepal.Length)
str(x)
summary(x)
class(x)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
summary(BodyWeight$rat)
summary(BodyWeight$Rat)
View(BodyWeight)
?lattice
library(datasets)
data(airquality)
rm(iris)
rm(x)
head(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size = 4)
p + geom_point(size = 6)
data(iris)
iris[1]
iris[1, ]
install.packages(c("C50", "car", "lava", "mvtnorm", "rpart.plot"))
install.packages(c("magrittr", "mgcv"))
x <- rnum(100)
x <- rnorm(100)
mode(x)
summary(x)
my.data <- matrix(rnorm(1:10,5),byrow=F,nrow=10,ncol=5) # create example data
list.of.modes <- apply(my.data,2,mlv,method="mfv") # get the mode
vector.of.modes <- NULL # create the vector we want
for (i in 1:length(list.of.modes)) {
vector.of.modes[i] <- list.of.modes[[i]]$M #<---This is the interesting line
}
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
df <- cbind(x,y,z)
str(df)
class(df)
df <- as.data.frame(df)
class(df)
df
x <- rbinom(100)
y <- rbinom(100)
z <- rbinom(100)
df <- as.data.frame(cbind(x,y,z))
head(df)
?rbinom
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
df <- as.data.frame(cbind(x,y,z))
head(df)
df$x <- round(df$x)
df$x
df$y <- round(df$y)
df$z <- round(df$z)
head(df)
install.packages("modeest")
library(modeest)
list.of.modes <- apply(df,2,mlv,method="mfv") # get the mode
a <- apply(df,2,mlv,method="mfv") # get the mode
head(a)
a <- apply(df, 1, mlv, method = "mfv") # get the mode
head(a)
View(a)
b <- NULL # create the vector we want
for (i in 1:length(a)) {
b[i] <- a[[i]]$M #<---This is the interesting line
}
head(b)
b
head(df)
head(b)
a <- apply(df, 1, mlv, method = "discrete") # get the mode
b <- NULL # create the vector we want
for (i in 1:length(a)) {
b[i] <- a[[i]]$M #<---This is the interesting line
}
head(b)
install.packages(c("caret", "CORElearn", "digest", "earth", "httr", "jsonlite", "lazyeval", "manipulate", "mvtnorm", "party", "partykit", "plotmo", "prodlim", "quantmod", "rattle", "RColorBrewer", "RCurl", "reshape2", "rmarkdown", "RMySQL", "rpart.plot", "swirl", "tidyr", "VGAM"))
install.packages("R.utils")
?bunzip2
library(R.utils)
?bunzip2
setwd("~/Documents/Coursera/Assignments/RepData_PeerAssessment2")
# load required libraries
library(lubridate)
library(stringr)
library(quantmod)
library(reshape2)
library(lattice)
library(R.utils)
# read the data
df <- read.csv('repdata_data_StormData.csv', sep = ',', header = TRUE,
nrows = 1000000, comment.char = "", stringsAsFactors = FALSE)
# keep required variables
# date, event type, fatalities, injuries, property damage, crop damage, multipliers
df <- df[c(2, 8, 23:28)]
# convert column names to lower case
colnames(df) <- tolower(colnames(df))
# convert date to POSIXct format
df$bgn_date <- mdy_hms(df$bgn_date)
# compute year variable
df$year <- year(df$bgn_date)
### 2. Data Cleaning and Manipulation
## a. clean the event type variable
# strip whitespace and convert to upper case
df$evtype.r <- str_trim(df$evtype)
df$evtype.r <- toupper(df$evtype.r)
# first, set event types with "Summary" or "Metro" to NA
# these are database errors
df$evtype.r <- gsub("^SUMMARY.*|^METRO.*", NA, df$evtype.r)
# first pass: process correct spelling, misspellings, first terms in a list
# and alternate terms
df$evtype.r <- gsub("ASTRONOMICAL LOW TIDE", "Astronomical Low Tide", df$evtype.r)
df$evtype.r <- gsub("AVALANCH?E", "Avalanche", df$evtype.r)
df$evtype.r <- gsub("^BLIZZARD.*", "Blizzard", df$evtype.r)
df$evtype.r <- gsub("^C(OA)?STA?L.*|.*C(OA)?STA?L FLOOD.*$", "Coastal Flooding", df$evtype.r)
df$evtype.r <- gsub("^COLD.*", "Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("DEBRIS FLOW", "Debris Flow", df$evtype.r)
df$evtype.r <- gsub("^DENSE FOG.*|.*DENSE FOG$|^[FV]OG.*", "Dense Fog", df$evtype.r)
df$evtype.r <- gsub("DENSE SMOKE", "Dense Smoke", df$evtype.r)
df$evtype.r <- gsub("^DROUGHT|^DRY [CHNPSW].*|^DRY(NESS)?$|^UN.*DRY|^AB.*DRY|^EX.*DRY|VERY DRY", "Drought", df$evtype.r)
df$evtype.r <- gsub("^DUST DEV[IE]L.*", "Dust Devil", df$evtype.r)
df$evtype.r <- gsub("^DUST ?STORM.*", "Dust Storm", df$evtype.r)
df$evtype.r <- gsub("^EX.*HEAT.*|.*EX.*HEAT$|^HOT.*|^RE.*[HW].*|^UN.*[WH].*|^PR.*WA.*|^VERY WARM", "Excessive Heat", df$evtype.r)
df$evtype.r <- gsub("^EX.*COLD.*|^EX.*WIND ?CH.*|.*EX.*WIND CH.*$|^BI.*|^[RS]E.*CO.*|^PR.*CO.*|^UN.*CO.*|^LOW [TW].*", "Extreme Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("^FLASH FLOOO?D.*", "Flash Flood", df$evtype.r)
df$evtype.r <- gsub("^FLOOD.*|^URBAN.*", "Flood", df$evtype.r)
df$evtype.r <- gsub("^FROST.*|^FREEZ.*", "Frost/Freeze", df$evtype.r)
df$evtype.r <- gsub("^FUNNEL.*|.*FUNNEL CLOUD$", "Funnel Cloud", df$evtype.r)
df$evtype.r <- gsub("FREEZING FOG", "Freezing Fog", df$evtype.r)
df$evtype.r <- gsub("^HAIL.*|.*HAIL$", "Hail", df$evtype.r)
df$evtype.r <- gsub("^HEAT.*", "Heat", df$evtype.r)
df$evtype.r <- gsub("^HEAVY RAIN.*", "Heavy Rain", df$evtype.r)
df$evtype.r <- gsub("^HEAVY.*SNOW.*|^SNOW.*", "Heavy Snow", df$evtype.r)
df$evtype.r <- gsub("^H[IE].*SURF.*|^H[IE].*SEAS.*|HAZARDOUS SURF|^H[IE].*SWELLS.*", "High Surf", df$evtype.r)
df$evtype.r <- gsub("^HIGH WIND.*", "High Wind", df$evtype.r)
df$evtype.r <- gsub("^HURRICANE.*|^TYPHOON", "Hurricane (Typhoon)", df$evtype.r)
df$evtype.r <- gsub("^IC.*", "Ice Storm", df$evtype.r)
df$evtype.r <- gsub("^LAKE.?EFFECT SNOW|.*LAKE SNOW$", "Lake-Effect Snow", df$evtype.r)
df$evtype.r <- gsub("^LAKE(.*)?FLOOD", "Lakeshore Flood", df$evtype.r)
df$evtype.r <- gsub("^LIG[HN]TN?ING.*", "Lightning", df$evtype.r)
df$evtype.r <- gsub("MARINE HAIL", "Marine Hail", df$evtype.r)
df$evtype.r <- gsub("MARINE HIGH WIND", "Marine High Wind", df$evtype.r)
df$evtype.r <- gsub("MARINE STRONG WIND", "Marine Strong Wind", df$evtype.r)
df$evtype.r <- gsub("MARINE T(HUNDER)?ST(OR)?M WIND", "Marine Thunderstorm", df$evtype.r)
df$evtype.r <- gsub("^RIP CURRENT.*", "Rip Current", df$evtype.r)
df$evtype.r <- gsub("SEICHE", "Seiche", df$evtype.r)
df$evtype.r <- gsub("^SLEET.*", "Sleet", df$evtype.r)
df$evtype.r <- gsub("^STORM SURGE.*", "Storm Surge/Tide", df$evtype.r)
df$evtype.r <- gsub("^STRONG WIND.*", "Strong Wind", df$evtype.r)
df$evtype.r <- gsub("^TH?UN?D?EE?R?E?[ST]?[TS][OR][RO]M.*|^THUNDERSTORM ?W.*|.*THUNDERSTORM WIND.*$", "Thunderstorm Wind", df$evtype.r)
df$evtype.r <- gsub("^TORN[AD][DA]O.*", "Tornado", df$evtype.r)
df$evtype.r <- gsub("TROPICAL DEPRESSION", "Tropical Depression", df$evtype.r)
df$evtype.r <- gsub("^TROPICAL STORM.*", "Tropical Storm", df$evtype.r)
df$evtype.r <- gsub("TSUNAMI", "Tsunami", df$evtype.r)
df$evtype.r <- gsub("^VOLCANIC.*", "Volcanic Ash", df$evtype.r)
df$evtype.r <- gsub("^WAY?TER ?SPOUT.*", "Waterspout", df$evtype.r)
df$evtype.r <- gsub("^WILD.*?FIRE(S.*)?|.*FIRE.*$", "Wildfire", df$evtype.r)
df$evtype.r <- gsub("^WINTER STORM.*", "Winter Storm", df$evtype.r)
df$evtype.r <- gsub("^WINTER WEATHER.*|^WINTE?RY? MIX", "Winter Weather", df$evtype.r)
# second pass: keywords at the end of the string
# and anything else missed during the first pass
df$evtype.r <- gsub(".*BLIZZARD$", "Blizzard", df$evtype.r)
df$evtype.r <- gsub("^WIND CHILL.*|.*WIND CHILL$", "Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("^HIGH T.*", "Excessive Heat", df$evtype.r)
df$evtype.r <- gsub("^HYP[OE].*", "Extreme Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub(".*FLASH FLOOD$", "Flash Flood", df$evtype.r)
df$evtype.r <- gsub(".*FLOOD.*$|^SM(AL)?L.*", "Flood", df$evtype.r)
df$evtype.r <- gsub("^RAIN.*|.*RAIN.*$", "Heavy Rain", df$evtype.r)
df$evtype.r <- gsub(".*FLOYD$", "Hurricane (Typhoon)", df$evtype.r)
df$evtype.r <- gsub(".*ICE STORM$", "Ice Storm", df$evtype.r)
df$evtype.r <- gsub("^[MO].*SNOW.*|.*SNOW$", "Heavy Snow", df$evtype.r)
df$evtype.r <- gsub("^SE.*THUNDERSTORM.*|^GUST.*|^TSTM.*", "Thunderstorm Wind", df$evtype.r)
# read the data
df <- read.csv('repdata_data_StormData.csv', sep = ',', header = TRUE,
nrows = 1000000, comment.char = "", stringsAsFactors = FALSE)
# keep required variables
# date, event type, fatalities, injuries, property damage, crop damage, multipliers
df <- df[c(2, 8, 23:28)]
# convert column names to lower case
colnames(df) <- tolower(colnames(df))
# convert date to POSIXct format
df$bgn_date <- mdy_hms(df$bgn_date)
# compute year variable
df$year <- year(df$bgn_date)
### 2. Data Cleaning and Manipulation
## a. clean the event type variable
# strip whitespace and convert to upper case
df$evtype.r <- str_trim(df$evtype)
df$evtype.r <- toupper(df$evtype.r)
# first, set event types with "Summary" or "Metro" to NA
# these are database errors
df$evtype.r <- gsub("^SUMMARY.*|^METRO.*", NA, df$evtype.r)
# first pass: process correct spelling, misspellings, first terms in a list
# and alternate terms
df$evtype.r <- gsub("ASTRONOMICAL LOW TIDE", "Astronomical Low Tide", df$evtype.r)
df$evtype.r <- gsub("AVALANCH?E", "Avalanche", df$evtype.r)
df$evtype.r <- gsub("^BLIZZARD.*", "Blizzard", df$evtype.r)
df$evtype.r <- gsub("^C(OA)?STA?L.*|.*C(OA)?STA?L FLOOD.*$", "Coastal Flooding", df$evtype.r)
df$evtype.r <- gsub("^COLD.*", "Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("DEBRIS FLOW", "Debris Flow", df$evtype.r)
df$evtype.r <- gsub("^DENSE FOG.*|.*DENSE FOG$|^[FV]OG.*", "Dense Fog", df$evtype.r)
df$evtype.r <- gsub("DENSE SMOKE", "Dense Smoke", df$evtype.r)
df$evtype.r <- gsub("^DROUGHT|^DRY [CHNPSW].*|^DRY(NESS)?$|^UN.*DRY|^AB.*DRY|^EX.*DRY|VERY DRY", "Drought", df$evtype.r)
df$evtype.r <- gsub("^DUST DEV[IE]L.*", "Dust Devil", df$evtype.r)
df$evtype.r <- gsub("^DUST ?STORM.*", "Dust Storm", df$evtype.r)
df$evtype.r <- gsub("^EX.*HEAT.*|.*EX.*HEAT$|^HOT.*|^RE.*[HW].*|^UN.*[WH].*|^PR.*WA.*|^VERY WARM", "Excessive Heat", df$evtype.r)
df$evtype.r <- gsub("^EX.*COLD.*|^EX.*WIND ?CH.*|.*EX.*WIND CH.*$|^BI.*|^[RS]E.*CO.*|^PR.*CO.*|^UN.*CO.*|^LOW [TW].*", "Extreme Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("^FLASH FLOOO?D.*", "Flash Flood", df$evtype.r)
df$evtype.r <- gsub("^FLOOD.*|^URBAN.*", "Flood", df$evtype.r)
df$evtype.r <- gsub("^FROST.*|^FREEZ.*", "Frost/Freeze", df$evtype.r)
df$evtype.r <- gsub("^FUNNEL.*|.*FUNNEL CLOUD$", "Funnel Cloud", df$evtype.r)
df$evtype.r <- gsub("FREEZING FOG", "Freezing Fog", df$evtype.r)
df$evtype.r <- gsub("^HAIL.*|.*HAIL$", "Hail", df$evtype.r)
df$evtype.r <- gsub("^HEAT.*", "Heat", df$evtype.r)
df$evtype.r <- gsub("^HEAVY RAIN.*", "Heavy Rain", df$evtype.r)
df$evtype.r <- gsub("^HEAVY.*SNOW.*|^SNOW.*", "Heavy Snow", df$evtype.r)
df$evtype.r <- gsub("^H[IE].*SURF.*|^H[IE].*SEAS.*|HAZARDOUS SURF|^H[IE].*SWELLS.*", "High Surf", df$evtype.r)
df$evtype.r <- gsub("^HIGH WIND.*", "High Wind", df$evtype.r)
df$evtype.r <- gsub("^HURRICANE.*|^TYPHOON", "Hurricane (Typhoon)", df$evtype.r)
df$evtype.r <- gsub("^IC.*", "Ice Storm", df$evtype.r)
df$evtype.r <- gsub("^LAKE.?EFFECT SNOW|.*LAKE SNOW$", "Lake-Effect Snow", df$evtype.r)
df$evtype.r <- gsub("^LAKE(.*)?FLOOD", "Lakeshore Flood", df$evtype.r)
df$evtype.r <- gsub("^LIG[HN]TN?ING.*", "Lightning", df$evtype.r)
df$evtype.r <- gsub("MARINE HAIL", "Marine Hail", df$evtype.r)
df$evtype.r <- gsub("MARINE HIGH WIND", "Marine High Wind", df$evtype.r)
df$evtype.r <- gsub("MARINE STRONG WIND", "Marine Strong Wind", df$evtype.r)
df$evtype.r <- gsub("MARINE T(HUNDER)?ST(OR)?M WIND", "Marine Thunderstorm", df$evtype.r)
df$evtype.r <- gsub("^RIP CURRENT.*", "Rip Current", df$evtype.r)
df$evtype.r <- gsub("SEICHE", "Seiche", df$evtype.r)
df$evtype.r <- gsub("^SLEET.*", "Sleet", df$evtype.r)
df$evtype.r <- gsub("^STORM SURGE.*", "Storm Surge/Tide", df$evtype.r)
df$evtype.r <- gsub("^STRONG WIND.*", "Strong Wind", df$evtype.r)
df$evtype.r <- gsub("^TH?UN?D?EE?R?E?[ST]?[TS][OR][RO]M.*|^THUNDERSTORM ?W.*|.*THUNDERSTORM WIND.*$", "Thunderstorm Wind", df$evtype.r)
df$evtype.r <- gsub("^TORN[AD][DA]O.*", "Tornado", df$evtype.r)
df$evtype.r <- gsub("TROPICAL DEPRESSION", "Tropical Depression", df$evtype.r)
df$evtype.r <- gsub("^TROPICAL STORM.*", "Tropical Storm", df$evtype.r)
df$evtype.r <- gsub("TSUNAMI", "Tsunami", df$evtype.r)
df$evtype.r <- gsub("^VOLCANIC.*", "Volcanic Ash", df$evtype.r)
df$evtype.r <- gsub("^WAY?TER ?SPOUT.*", "Waterspout", df$evtype.r)
df$evtype.r <- gsub("^WILD.*?FIRE(S.*)?|.*FIRE.*$", "Wildfire", df$evtype.r)
df$evtype.r <- gsub("^WINTER STORM.*", "Winter Storm", df$evtype.r)
df$evtype.r <- gsub("^WINTER WEATHER.*|^WINTE?RY? MIX", "Winter Weather", df$evtype.r)
# second pass: keywords at the end of the string
# and anything else missed during the first pass
df$evtype.r <- gsub(".*BLIZZARD$", "Blizzard", df$evtype.r)
df$evtype.r <- gsub("^WIND CHILL.*|.*WIND CHILL$", "Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("^HIGH T.*", "Excessive Heat", df$evtype.r)
df$evtype.r <- gsub("^HYP[OE].*", "Extreme Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub(".*FLASH FLOOD$", "Flash Flood", df$evtype.r)
df$evtype.r <- gsub(".*FLOOD.*$|^SM(AL)?L.*", "Flood", df$evtype.r)
df$evtype.r <- gsub("^RAIN.*|.*RAIN.*$", "Heavy Rain", df$evtype.r)
df$evtype.r <- gsub(".*FLOYD$", "Hurricane (Typhoon)", df$evtype.r)
df$evtype.r <- gsub(".*ICE STORM$", "Ice Storm", df$evtype.r)
df$evtype.r <- gsub("^[MO].*SNOW.*|.*SNOW$", "Heavy Snow", df$evtype.r)
df$evtype.r <- gsub("^SE.*THUNDERSTORM.*|^GUST.*|^TSTM.*", "Thunderstorm Wind", df$evtype.r)
x <- unique(df$evtype.r)
table(df$evtype.r)
x <- rnorm(100)
nrow(x)
str(x)
x <- data.frame(x)
nrow(x)
setwd("~/Documents/Coursera/Assignments/RepData_PeerAssessment2")
library(lubridate)
library(stringr)
library(quantmod)
library(reshape2)
library(lattice)
library(R.utils)
df <- read.csv('repdata_data_StormData.csv', sep = ',', header = TRUE, nrows = 1000000, comment.char = "", stringsAsFactors = FALSE)
# Keep required variables
# Date, Event Type, Fatalities, Injuries, Property Damage, Crop Damage, Damage Multipliers
df <- df[c(2, 8, 23:28)]
# Convert column names to lower case
colnames(df) <- tolower(colnames(df))
# Convert date to POSIXct format
df$bgn_date <- mdy_hms(df$bgn_date)
# Compute year variable
df$year <- year(df$bgn_date)
# Print number of records
nrow(df)
# Strip whitespace and convert to upper case
df$evtype.r <- str_trim(df$evtype)
df$evtype.r <- toupper(df$evtype.r)
# Set event types with "Summary" or "Metro" to NA, as these are database errors
df$evtype.r <- gsub("^SUMMARY.*|^METRO.*", NA, df$evtype.r)
# First pass: process correct spelling, typos, abbreviations, first terms in a list and alternate terms
df$evtype.r <- gsub("ASTRONOMICAL LOW TIDE", "Astronomical Low Tide", df$evtype.r)
df$evtype.r <- gsub("AVALANCH?E", "Avalanche", df$evtype.r)
df$evtype.r <- gsub("^BLIZZARD.*", "Blizzard", df$evtype.r)
df$evtype.r <- gsub("^C(OA)?STA?L.*|.*C(OA)?STA?L FLOOD.*$", "Coastal Flooding", df$evtype.r)
df$evtype.r <- gsub("^COLD.*", "Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("DEBRIS FLOW", "Debris Flow", df$evtype.r)
df$evtype.r <- gsub("^DENSE FOG.*|.*DENSE FOG$|^[FV]OG.*", "Dense Fog", df$evtype.r)
df$evtype.r <- gsub("DENSE SMOKE", "Dense Smoke", df$evtype.r)
df$evtype.r <- gsub("^DROUGHT|^DRY [CHNPSW].*|^DRY(NESS)?$|^UN.*DRY|^AB.*DRY|^EX.*DRY|VERY DRY", "Drought", df$evtype.r)
df$evtype.r <- gsub("^DUST DEV[IE]L.*", "Dust Devil", df$evtype.r)
df$evtype.r <- gsub("^DUST ?STORM.*", "Dust Storm", df$evtype.r)
df$evtype.r <- gsub("^EX.*HEAT.*|.*EX.*HEAT$|^HOT.*|^RE.*[HW].*|^UN.*[WH].*|^PR.*WA.*|^VERY WARM", "Excessive Heat", df$evtype.r)
df$evtype.r <- gsub("^EX.*COLD.*|^EX.*WIND ?CH.*|.*EX.*WIND CH.*$|^BI.*|^[RS]E.*CO.*|^PR.*CO.*|^UN.*CO.*|^LOW [TW].*", "Extreme Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("^FLASH FLOOO?D.*", "Flash Flood", df$evtype.r)
df$evtype.r <- gsub("^FLOOD.*|^URBAN.*", "Flood", df$evtype.r)
df$evtype.r <- gsub("^FROST.*|^FREEZ.*", "Frost/Freeze", df$evtype.r)
df$evtype.r <- gsub("^FUNNEL.*|.*FUNNEL CLOUD$", "Funnel Cloud", df$evtype.r)
df$evtype.r <- gsub("FREEZING FOG", "Freezing Fog", df$evtype.r)
df$evtype.r <- gsub("^HAIL.*|.*HAIL$", "Hail", df$evtype.r)
df$evtype.r <- gsub("^HEAT.*", "Heat", df$evtype.r)
df$evtype.r <- gsub("^HEAVY RAIN.*", "Heavy Rain", df$evtype.r)
df$evtype.r <- gsub("^HEAVY.*SNOW.*|^SNOW.*", "Heavy Snow", df$evtype.r)
df$evtype.r <- gsub("^H[IE].*SURF.*|^H[IE].*SEAS.*|HAZARDOUS SURF|^H[IE].*SWELLS.*", "High Surf", df$evtype.r)
df$evtype.r <- gsub("^HIGH WIND.*", "High Wind", df$evtype.r)
df$evtype.r <- gsub("^HURRICANE.*|^TYPHOON", "Hurricane (Typhoon)", df$evtype.r)
df$evtype.r <- gsub("^IC.*", "Ice Storm", df$evtype.r)
df$evtype.r <- gsub("^LAKE.?EFFECT SNOW|.*LAKE SNOW$", "Lake-Effect Snow", df$evtype.r)
df$evtype.r <- gsub("^LAKE(.*)?FLOOD", "Lakeshore Flood", df$evtype.r)
df$evtype.r <- gsub("^LIG[HN]TN?ING.*", "Lightning", df$evtype.r)
df$evtype.r <- gsub("MARINE HAIL", "Marine Hail", df$evtype.r)
df$evtype.r <- gsub("MARINE HIGH WIND", "Marine High Wind", df$evtype.r)
df$evtype.r <- gsub("MARINE STRONG WIND", "Marine Strong Wind", df$evtype.r)
df$evtype.r <- gsub("MARINE T(HUNDER)?ST(OR)?M WIND", "Marine Thunderstorm", df$evtype.r)
df$evtype.r <- gsub("^RIP CURRENT.*", "Rip Current", df$evtype.r)
df$evtype.r <- gsub("SEICHE", "Seiche", df$evtype.r)
df$evtype.r <- gsub("^SLEET.*", "Sleet", df$evtype.r)
df$evtype.r <- gsub("^STORM SURGE.*", "Storm Surge/Tide", df$evtype.r)
df$evtype.r <- gsub("^STRONG WIND.*", "Strong Wind", df$evtype.r)
df$evtype.r <- gsub("^TH?UN?D?EE?R?E?[ST]?[TS][OR][RO]M.*|^THUNDERSTORM ?W.*|.*THUNDERSTORM WIND.*$", "Thunderstorm Wind", df$evtype.r)
df$evtype.r <- gsub("^TORN[AD][DA]O.*", "Tornado", df$evtype.r)
df$evtype.r <- gsub("TROPICAL DEPRESSION", "Tropical Depression", df$evtype.r)
df$evtype.r <- gsub("^TROPICAL STORM.*", "Tropical Storm", df$evtype.r)
df$evtype.r <- gsub("TSUNAMI", "Tsunami", df$evtype.r)
df$evtype.r <- gsub("^VOLCANIC.*", "Volcanic Ash", df$evtype.r)
df$evtype.r <- gsub("^WAY?TER ?SPOUT.*", "Waterspout", df$evtype.r)
df$evtype.r <- gsub("^WILD.*?FIRE(S.*)?|.*FIRE.*$", "Wildfire", df$evtype.r)
df$evtype.r <- gsub("^WINTER STORM.*", "Winter Storm", df$evtype.r)
df$evtype.r <- gsub("^WINTER WEATHER.*|^WINTE?RY? MIX", "Winter Weather", df$evtype.r)
# Second pass: keywords at the end of the string and anything else missed during the first pass
df$evtype.r <- gsub(".*BLIZZARD$", "Blizzard", df$evtype.r)
df$evtype.r <- gsub("^WIND CHILL.*|.*WIND CHILL$", "Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub("^HIGH T.*", "Excessive Heat", df$evtype.r)
df$evtype.r <- gsub("^HYP[OE].*", "Extreme Cold/Wind Chill", df$evtype.r)
df$evtype.r <- gsub(".*FLASH FLOOD$", "Flash Flood", df$evtype.r)
df$evtype.r <- gsub(".*FLOOD.*$|^SM(AL)?L.*", "Flood", df$evtype.r)
df$evtype.r <- gsub("^RAIN.*|.*RAIN.*$", "Heavy Rain", df$evtype.r)
df$evtype.r <- gsub(".*FLOYD$", "Hurricane (Typhoon)", df$evtype.r)
df$evtype.r <- gsub(".*ICE STORM$", "Ice Storm", df$evtype.r)
df$evtype.r <- gsub("^[MO].*SNOW.*|.*SNOW$", "Heavy Snow", df$evtype.r)
df$evtype.r <- gsub("^SE.*THUNDERSTORM.*|^GUST.*|^TSTM.*", "Thunderstorm Wind", df$evtype.r)
# Convert all remaining terms in ALL CAPS to missing
df$evtype.r <- gsub("^.[A-Z]", NA, df$evtype.r)
df$propdmgexp <- toupper(df$propdmgexp)
df$pmult <- 0
df$pmult[df$propdmgexp == "H"] <- 10^2
df$pmult[df$propdmgexp == "K"] <- 10^3
df$pmult[df$propdmgexp == "M"] <- 10^6
df$pmult[df$propdmgexp == "B"] <- 10^9
df$cropdmgexp <- toupper(df$cropdmgexp)
df$cmult <- 0
df$cmult[df$cropdmgexp == "K"] <- 10^3
df$cmult[df$cropdmgexp == "M"] <- 10^6
suppressWarnings(getSymbols("CPIAUCSL", src = 'FRED'))
cpi <- apply.yearly(CPIAUCSL, mean)
conv <- 1 / cpi * as.numeric(cpi["2011"])
x <- data.frame(conv[4:65, ])
year <- c(1950:2011)
conv <- cbind(year, x)
row.names(conv) <- c(1:62)
head(conv)
df$conv <- 0
for (i in 1:nrow(conv)) {
df$conv[df$year == conv$year[i]] <- conv$CPIAUCSL[i]
}
df$property <- df$propdmg * df$pmult * df$conv
df$crop <- df$cropdmg * df$cmult * df$conv
df.injury <- melt(df[, c(4, 5, 11)], id = "evtype.r")
df.injury <- dcast(df.injury, evtype.r ~ variable, sum)
df.injury <- df.injury[2:46, ]
df.i2 <- melt(df.injury, id = "evtype.r")
df.i2$variable <- gsub("injuries", "Injuries", df.i2$variable)
df.i2$variable <- gsub("fatalities", "Fatalities", df.i2$variable)
head(df.i2)
head(df)
View(colnames(df))
?echo=FALSE
?echo
??echo
?library
setwd("~/Documents/Coursera/Assignments/RepData_PeerAssessment2")
load("stormdata.RData")
head(df.i2)
head(df.damage
)
head(df.injury)
df.injury <- df.injury[order(df.injury$injuries)]
df.injury <- df.injury[order(df.injury$injuries), ]
head(df.injury)
df.injury <- df.injury[order(-df.injury$injuries), ]
head(df.injury)
df.damage <- df.damage[order(-df.damage$property), ]
head(df.damage)
df.damage <- df.damage[order(-df.damage$crop), ]
head(df.damage)
